1、函数作为入参
	def count(p : （char） => Boolean) ：int

2、表达式是有值得
	if (x > 1) 1 else -1 这个表达式的值为1 或者 -1

3、输出 print 和println， 也支持C语言的输出 printf(%s, %d)

4、for 循环中的yield生成一个vector 。for + if + yield 等同于 filter + map

   b = ArrayBuffer(1, 2, 3, 4, 5) 让b中的偶数元素翻倍
	for (i <- b if i % 2 ==0 ) yield 2 * i 
	b.filter(_ % 2 == 0).map(2 * _)  _代表b的每个元素

5、函数中的变长参数 def printInfo(age: Int , names: String* ) = {}   String 加一个 * 号表示变长
	_*表示参数序列， val a = sum(1 to 5: _*) //把 1 to 5 转成参数序列
	def func(): Unit = {} 表示过程，没有返回值 

6、异常
	try {
	    ....
	} catch {
       ....
	} finally {
	    ....
	}
	

7、变长数组， ArrayBuffer 


8、0 until b.length 表示 从0 到b的长度-1
	0 to b.length -1 等价
	to 和until 的后面可以用括号括起来，间隔访问。比如 0 to （b.length -1, 2)表示每隔一个取一个参数
	还可以用reverse表示反转，从尾至头访问

9、mkString 生成字符串，
	b =ArrayBuffer(1, 2, 3, 4, 5, 7)
	b.mkString(" and ")
	1 and 2 and 3 and 4 and 5 and 7
	b.mkString("<", ",", ">")
	<1,2,3,4,5,7>

10、keys.zip(valus).toMap  将两个数组转成map

11、类的主构造函数和辅助构造函数
	主构造函数的参数跟类的字段参数
	class Pizza(var crustSize: Int, var crustType: String) {
		//辅助构造函数
  		def this(crustSize: Int) { 
    		this(crustSize, Pizza.DEFAULT_CRUST_TYPE) //调用主构造函数。类字段有crustSize和crustType，
  	}

	辅助构造函数名为this， 而且用this来调用另一个构造函数，每个辅助构造函数的入参都应该不一样

12、单例对象：全是静态字段和静态方法，单独一个对象，他没有对应的类
	 半生对象：与类名一致。伴生对象和相应的类可以相互访问，但必须在同一个文件中
		    访问时必须加上对象名，比如 Account.newNumber
			

13、类和伴生对象都有自己的apply方法，主要是解决一些初始化问题 def apply = new 对象名
	 伴生对象调用apply，对象名(参数1，参数2，...) 生成一个类的实例

14、别名 type new = old  ， 用new来代替old

15、override 重写父类的方法或者字段 override def toString =
    super 调用父类的方法 super.toString
    isInstanceOf[Employee] 是否属于Employee类及其子类，如果不是会抛出异常
    classOf[Employee] 是否只属于Employee类，而非子类。 if(b.getClass == classOf[B]) "yes" else "no"
    protected 可以被任何子类访问，如果想要被包访问，protected[包名] def description = 
    protected[this] val value =  表示只能被当前对象访问，子类不能访问
    private[this] val value =  表示不能被当前对象访问 .value 不被允许
    calss Manager extends Employee(name, age)调用父类Employee的构造函数，入参为name和age
    val字段在子类中只能用val 来重写 class Strudent(override val id: Int) extends Person
    def字段不带参数的话可以用val重写，或者用def重写
    var字段只能重写抽象类的var，其他都不行
    匿名子类，通过包含带有定义或者重写的代码块的方式来创建一个匿名子类  val alien = new Person("Fred") { def greeting = "Hi I'm Fred"}
    abstract 抽象类 abstract class Person(val name: String) { def id: Int} 并没有说明id怎么计算
    getter 方法，val字段。因为你只能取值，不能赋值
    setter 方法，var字段。因为你既能取值，还能赋值
    final 定义为final的字段，不能被重写 final val name: String = ，定义为final的类不能被extends
    with 提前定义父类的构造器执行之前初始化子类的val 字段。 class Ant extends { override val range: Int = 2}with Creature
    
16、读取文件Scala.io.Source 
    val file = source.fromFile("/usr/file.txt", "UTF-8")
    lines = file.getLines 按行读取文件，返回一个迭代器 for (line <- lines)
    lines.toArray 直接转出字符串数组
    for (c <- file) 单个字符读取
    file.mkString 把文件读取成字符串
    file.mkString.split("\n") 换行读取，跟lines.toArray效果一样
    读二进制文件  val file = new File(filename)
    		val in = new FileInputStream(file)
		val bytes = new Array[BYTE](file.length.toInt)
		in.read(bytes)
		in.close()
    写文件 val out = new PrintWriter("numbers.txt")
    	  for (i <- 1 to 100) out.println(i)
	  out.close()
    
    shell import sys.process._
    
    
    
    
    
    
